// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    // generate code in custom folder, not `node_modules`
    //output   = "../src/generated/prisma" // optional
  }
  
  datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
  }
  
  model Beer {
    id             String  @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    type           String
    region         String
    alcoholContent Float
    isTested       Boolean
  }
  
  model ExpenseTracker {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    totalMoney Float
    startDate  String?
    endDate    String
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    expenses   Expense[]
    
    // User relationship
    userId     String?   @db.ObjectId
    user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  }
  
  model Expense {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId
    amount          Float
    description     String
    date            String
    createdAt       DateTime       @default(now())
    expenseTracker  ExpenseTracker @relation(fields: [trackerId], references: [id], onDelete: Cascade)
    trackerId       String         @db.ObjectId
  }
  
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Expense tracker relationship
  expenseTrackers ExpenseTracker[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
