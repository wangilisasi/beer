"use client";

import { useState } from "react";
// Use the Beer type generated by Prisma
import  type {Beer} from "@prisma/client"; // Adjust the import path as necessary
import { useRouter } from "next/navigation"; // Import useRouter for navigation
// Define props for the component
interface BeerListProps {
  initialBeers: Beer[];
}

export default function BeerList({ initialBeers }: BeerListProps) {
  const [beers, setBeers] = useState<Beer[]>(initialBeers);
  const router = useRouter(); // Initialize the router

  const toggleBeerTested = async (beerId: string) => {
    // Find the current state of the beer to determine the new state
    const beerToToggle = beers.find(beer => beer.id === beerId);
    if (!beerToToggle) return; // Should not happen, but good practice

    const newIsTested = !beerToToggle.isTested;

    // Optimistically update the UI
    setBeers(prev => prev.map(beer =>
      beer.id === beerId
        ? { ...beer, isTested: newIsTested }
        : beer
    ));

    // Persist the change to the database after updating the UI
    try {
      const response = await fetch(`/api/beers/${beerId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ isTested: newIsTested }),
      });

      if (!response.ok) {
        // Revert the state if the API call fails
        console.error('Failed to update beer status:', await response.text());
        setBeers(prev => prev.map(beer =>
          beer.id === beerId
            ? { ...beer, isTested: !newIsTested } // Revert to original state
            : beer
        ));
        // Optionally: Show an error message to the user
      }


      
    } catch (error) {
      console.error('Error updating beer status:', error);
      // Revert the state on network error etc.
      setBeers(prev => prev.map(beer =>
        beer.id === beerId
          ? { ...beer, isTested: !newIsTested } // Revert to original state
          : beer
      ));
      // Optionally: Show an error message to the user
    }

    router.refresh(); // Refresh the page to reflect the changes
  };

  const testedCount = beers.filter(beer => beer.isTested).length;
  const progressPercentage = beers.length > 0 ? (testedCount / beers.length) * 100 : 0;

  return (
    <>
      {/* Progress Bar and Count */}
      <div className="relative w-full h-2.5 bg-[#f5e6c9] rounded-full overflow-hidden mb-2">
        <div 
          className="absolute left-0 top-0 h-full bg-[#e6b800] transition-all duration-300 ease-in-out"
          style={{ width: `${progressPercentage}%` }}
        />
      </div>
      <p className="text-[#8B4513] mb-8">
        {testedCount} of {beers.length} beers tasted ({Math.round(progressPercentage)}%)
      </p>

      {/* Beer List */}
      <div className="space-y-4">
        {beers.map(beer => (
          <div 
            key={beer.id} 
            className={`
              p-4 rounded-lg border transition-all duration-200
              ${beer.isTested 
                ? 'bg-white border-[#e6b800] shadow-lg shadow-[#e6b800]/10' 
                : 'bg-white hover:bg-[#fbfbfb] hover:border-[#daa520] hover:shadow-md'}
            `}
          >
            <div className="flex items-center space-x-4">
              <div 
                className={`
                  h-6 w-6 rounded-md border-2 cursor-pointer transition-all duration-200 flex items-center justify-center
                  ${beer.isTested 
                    ? 'bg-[#daa520] border-[#daa520] text-white' 
                    : 'border-[#8B4513]/30 hover:border-[#daa520]'}
                `}
                onClick={() => toggleBeerTested(beer.id)} // Use string ID
              >
                {beer.isTested && (
                  <svg className="w-4 h-4" viewBox="0 0 24 24">
                    <path
                      fill="currentColor"
                      d="M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z"
                    />
                  </svg>
                )}
              </div>
              <div className="flex-1">
                <h2 className="text-xl font-roboto font-semibold text-[#a86823]">{beer.name}</h2>
                <div className="flex flex-wrap gap-2 mt-2">
                  <span className="text-sm px-2.5 py-1 rounded-md bg-[#f8f8f8] text-[#8B4513] border border-[#daa520]/20">
                    {beer.type}
                  </span>
                  <span className="text-sm px-2.5 py-1 rounded-md bg-[#f8f8f8] text-[#8B4513] border border-[#daa520]/20">
                    {beer.region}
                  </span>
                  <span className="text-sm px-2.5 py-1 rounded-md bg-[#fafafa] text-[#8B4513] border border-[#daa520]/20">
                    {beer.alcoholContent}% ABV
                  </span>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </>
  );
}
